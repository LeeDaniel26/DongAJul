{"ast":null,"code":"var _jsxFileName = \"/Users/leeyeonjae/Desktop/Projects/My Projects.nosync/web/DayByDay/DongAJul_APP_with_PDF/src/chatbot.js\",\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { pdfjs } from 'react-pdf';\nimport './Chat.css';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\nconst API_ENDPOINT = 'https://api.openai.com/v1/chat/completions'; // API endpoint for the GPT-3.5 model\nconst API_KEY = process.env.REACT_APP_API_KEY;\nfunction Chatbot() {\n  _s3();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [allText, setAllText] = useState('');\n  function PDFUpload() {\n    _s();\n    const [file, setFile] = useState(null);\n    const [numPages, setNumPages] = useState(null);\n    const fileInputRef = useRef(null);\n    function onFileChange(e) {\n      setFile(e.target.files[0]);\n    }\n    function onDocumentLoadSuccess({\n      numPages\n    }) {\n      setNumPages(numPages);\n    }\n    function handleUploadClick() {\n      fileInputRef.current.click();\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUploadClick,\n        children: \"PDF Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".pdf\",\n        onChange: onFileChange,\n        style: {\n          display: 'none'\n        },\n        ref: fileInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(PDFExtract, {\n        file: file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n  _s(PDFUpload, \"CNvaQefvparqE67t7Gc4awZaBz4=\");\n  function PDFExtract({\n    file\n  }) {\n    _s2();\n    useEffect(() => {\n      async function extractTextFromFile() {\n        const pdf = await pdfjs.getDocument({\n          url: URL.createObjectURL(file)\n        }).promise;\n        const numPages = pdf.numPages;\n        let newText = '';\n        for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n          const page = await pdf.getPage(pageNumber);\n          const content = await page.getTextContent();\n          const strings = content.items.map(item => item.str);\n          newText += strings.join(' ') + ' ';\n        }\n        setAllText(newText);\n      }\n      if (file) {\n        extractTextFromFile();\n      }\n    }, [file]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n  _s2(PDFExtract, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleSendMessage = async e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (userInput.trim() === '') return;\n\n      // Include the user message in the messages state\n      const newMessage = {\n        role: 'user',\n        content: userInput\n      };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      setUserInput('');\n      setAllText('');\n      try {\n        const response = await axios.post(API_ENDPOINT, {\n          model: 'gpt-3.5-turbo',\n          messages: [...messages, newMessage].map(message => ({\n            role: message.role,\n            content: message.content\n          }))\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${API_KEY}`\n          }\n        });\n        const assistantMessage = response.data.choices[0].message.content;\n        // Include the assistant message in the messages state\n        setMessages(prevMessages => [...prevMessages, {\n          role: 'assistant',\n          content: assistantMessage\n        }]);\n      } catch (error) {\n        console.error('Error occurred while fetching the response:', error);\n      }\n    }\n  };\n  const handleTextAreaHeight = e => {\n    e.target.style.height = 'auto';\n    e.target.style.height = e.target.scrollHeight + 'px';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PDFUpload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message.role === 'user' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prompt-bubble-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prompt-bubble\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"prompt-bubble-content\",\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n            message: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prompt-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt-textarea-container\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userInput + allText,\n          rows: \"1\",\n          className: \"prompt-textarea-box\",\n          onChange: e => setUserInput(e.target.value),\n          onKeyDown: (handleSendMessage, handleTextAreaHeight),\n          placeholder: \"Thype Prompt Here...\",\n          onInput: handleTextAreaHeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s3(Chatbot, \"+e3vC76y4T1RJq/dbs49zjjXesk=\");\n_c = Chatbot;\nexport default Chatbot;\n\n/* 궁금한 점\n - Chat 컴포넌트는 prompt를 입력할때마다 message 배열을 update하는데, 전에 render 했던 message element를\n   어떻게 re-render 하지 않고 새로운 element만 render를 하게 되지?\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","pdfjs","MessageBubble","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","API_ENDPOINT","API_KEY","process","env","REACT_APP_API_KEY","Chatbot","_s3","_s","$RefreshSig$","_s2","messages","setMessages","userInput","setUserInput","allText","setAllText","PDFUpload","file","setFile","numPages","setNumPages","fileInputRef","onFileChange","e","target","files","onDocumentLoadSuccess","handleUploadClick","current","click","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","display","ref","PDFExtract","extractTextFromFile","pdf","getDocument","url","URL","createObjectURL","promise","newText","pageNumber","page","getPage","content","getTextContent","strings","items","map","item","str","join","handleSendMessage","key","shiftKey","preventDefault","trim","newMessage","role","prevMessages","response","post","model","message","headers","Authorization","assistantMessage","data","choices","error","console","handleTextAreaHeight","height","scrollHeight","index","className","value","rows","onKeyDown","placeholder","onInput","_c","$RefreshReg$"],"sources":["/Users/leeyeonjae/Desktop/Projects/My Projects.nosync/web/DayByDay/DongAJul_APP_with_PDF/src/chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { pdfjs } from 'react-pdf'\nimport './Chat.css'\nimport MessageBubble from './MessageBubble';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nconst API_ENDPOINT = 'https://api.openai.com/v1/chat/completions'; // API endpoint for the GPT-3.5 model\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [allText, setAllText] = useState('');\n\n  function PDFUpload() {\n    const [file, setFile] = useState(null);\n    const [numPages, setNumPages] = useState(null);\n    const fileInputRef = useRef(null);\n\n    function onFileChange(e) {\n      setFile(e.target.files[0]);\n    }\n\n    function onDocumentLoadSuccess({ numPages }) {\n      setNumPages(numPages);\n    }\n\n    function handleUploadClick() {\n      fileInputRef.current.click();\n    }\n\n    return (\n      <div>\n        <button onClick={handleUploadClick}>PDF Upload</button>\n        <input\n          type=\"file\"\n          accept=\".pdf\"\n          onChange={onFileChange}\n          style={{ display: 'none' }}\n          ref={fileInputRef}\n        />\n        {file && (\n          <PDFExtract file={file} />\n        )}\n      </div>\n    );\n  }\n\n  function PDFExtract({ file }) {\n\n    useEffect(() => {\n      async function extractTextFromFile() {\n        const pdf = await pdfjs.getDocument({ url: URL.createObjectURL(file) }).promise;\n        const numPages = pdf.numPages;\n        let newText = '';\n\n        for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n          const page = await pdf.getPage(pageNumber);\n          const content = await page.getTextContent();\n          const strings = content.items.map((item) => item.str);\n          newText += strings.join(' ') + ' ';\n        }\n\n        setAllText(newText);\n      }\n\n      if (file) {\n        extractTextFromFile();\n      }\n    }, [file]);\n\n    return (\n      <div>\n        {/* <p>Extract PDF Text</p>\n        <pre>{allText}</pre> */}\n      </div>\n    );\n  }\n\n  const handleSendMessage = async (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n\n      if (userInput.trim() === '') return;\n\n      // Include the user message in the messages state\n      const newMessage = { role: 'user', content: userInput };\n      setMessages((prevMessages) => [...prevMessages, newMessage]);\n      setUserInput('');\n      setAllText('');\n\n      try {\n        const response = await axios.post(\n          API_ENDPOINT,\n          {\n            model: 'gpt-3.5-turbo',\n            messages: [...messages, newMessage].map((message) => ({ role: message.role, content: message.content })),\n          },\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${API_KEY}`,\n            },\n          }\n        );\n\n        const assistantMessage = response.data.choices[0].message.content;\n        // Include the assistant message in the messages state\n        setMessages((prevMessages) => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n      } catch (error) {\n        console.error('Error occurred while fetching the response:', error);\n      }\n    }\n  };\n\n  const handleTextAreaHeight = (e) => {\n    e.target.style.height = 'auto';\n    e.target.style.height = e.target.scrollHeight + 'px';\n  }\n\n  return (\n    <div>\n      <PDFUpload />\n      <div>\n        {messages.map((message, index) => (\n          <div key={index}>\n            {message.role === 'user' ? (\n              <div>\n                <div className='prompt-bubble-container'>\n                  <div className='prompt-bubble'>\n                    <div className='prompt-bubble-content'>\n                      {message.content}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <MessageBubble message={message.content} />\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <div>\n        <footer></footer>\n      </div>\n      <div className='prompt-container'>\n        <div className='prompt-textarea-container'>\n          <textarea value={userInput + allText} rows=\"1\" className='prompt-textarea-box' onChange={(e) => setUserInput(e.target.value)} onKeyDown={handleSendMessage, handleTextAreaHeight} placeholder=\"Thype Prompt Here...\" onInput={handleTextAreaHeight}></textarea>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n\n\n/* 궁금한 점\n - Chat 컴포넌트는 prompt를 입력할때마다 message 배열을 update하는데, 전에 render 했던 message element를\n   어떻게 re-render 하지 않고 새로운 element만 render를 하게 되지?\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}