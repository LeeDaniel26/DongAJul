{"ast":null,"code":"import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chat.css';\nimport MessageBubble from './MessageBubble';\nimport PDFUpload from './PDFUpload';\nconst API_ENDPOINT = 'https://api.openai.com/v1/chat/completions'; // API endpoint for the GPT-3.5 model\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n// function ParentComponent() {\n//   const Chatbot = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [userInput, setUserInput] = useState('');\n\n//     const handleSendMessage = async (e) => {\n//       if (e.key === 'Enter' && !e.shiftKey) {\n//         e.preventDefault();\n\n//         if (userInput.trim() === '') return;\n\n//         // Include the user message in the messages state\n//         const newMessage = { role: 'user', content: userInput };\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//         setUserInput('');\n\n//         try {\n//           const response = await axios.post(\n//             API_ENDPOINT,\n//             {Î\n//               model: 'gpt-3.5-turbo',\n//               messages: [...messages, newMessage].map((message) => ({ role: message.role, content: message.content })),\n//             },\n//             {\n//               headers: {\n//                 'Content-Type': 'application/json',\n//                 Authorization: `Bearer ${API_KEY}`,\n//               },\n//             }\n//           );\n\n//           const assistantMessage = response.data.choices[0].message.content;\n//           // Include the assistant message in the messages state\n//           setMessages((prevMessages) => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n//         } catch (error) {\n//           console.error('Error occurred while fetching the response:', error);\n//         }\n//       }\n//     };\n\n//     const handleTextAreaHeight = (e) => {\n//       e.target.style.height = 'auto';\n//       e.target.style.height = e.target.scrollHeight + 'px';\n//     }\n\n//     return (\n//       <div>\n//         <PDFUpload />\n//         <div>\n//           {messages.map((message, index) => (\n//             <div key={index}>\n//               {message.role === 'user' ? (\n//                 <div>\n//                   <div className='prompt-bubble-container'>\n//                     <div className='prompt-bubble'>\n//                       <div className='prompt-bubble-content'>\n//                         {message.content}\n//                       </div>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ) : (\n//                 <div>\n//                   <MessageBubble message={message.content} />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n//         </div>\n//         <div>\n//           <footer></footer>\n//         </div>\n//         <div className='prompt-container'>\n//           <div className='prompt-textarea-container'>\n//             <textarea value={userInput} rows=\"1\" className='prompt-textarea-box' onChange={(e) => setUserInput(e.target.value)} onKeyDown={handleSendMessage} placeholder=\"Thype Prompt Here...\" onInput={handleTextAreaHeight}></textarea>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <Chatbot />\n//     </div>\n//   );\n// }\n\nexport default Chatbot;","map":{"version":3,"names":["React","useState","axios","MessageBubble","PDFUpload","API_ENDPOINT","API_KEY","process","env","REACT_APP_API_KEY","Chatbot"],"sources":["/Users/leeyeonjae/Desktop/Projects/My Projects.nosync/web/DongAJul_APP/src/chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chat.css'\nimport MessageBubble from './MessageBubble';\nimport PDFUpload from './PDFUpload'\n\nconst API_ENDPOINT = 'https://api.openai.com/v1/chat/completions'; // API endpoint for the GPT-3.5 model\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n// function ParentComponent() {\n//   const Chatbot = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [userInput, setUserInput] = useState('');\n  \n//     const handleSendMessage = async (e) => {\n//       if (e.key === 'Enter' && !e.shiftKey) {\n//         e.preventDefault();\n  \n//         if (userInput.trim() === '') return;\n  \n//         // Include the user message in the messages state\n//         const newMessage = { role: 'user', content: userInput };\n//         setMessages((prevMessages) => [...prevMessages, newMessage]);\n//         setUserInput('');\n  \n//         try {\n//           const response = await axios.post(\n//             API_ENDPOINT,\n//             {Î\n//               model: 'gpt-3.5-turbo',\n//               messages: [...messages, newMessage].map((message) => ({ role: message.role, content: message.content })),\n//             },\n//             {\n//               headers: {\n//                 'Content-Type': 'application/json',\n//                 Authorization: `Bearer ${API_KEY}`,\n//               },\n//             }\n//           );\n  \n//           const assistantMessage = response.data.choices[0].message.content;\n//           // Include the assistant message in the messages state\n//           setMessages((prevMessages) => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n//         } catch (error) {\n//           console.error('Error occurred while fetching the response:', error);\n//         }\n//       }\n//     };\n  \n//     const handleTextAreaHeight = (e) => {\n//       e.target.style.height = 'auto';\n//       e.target.style.height = e.target.scrollHeight + 'px';\n//     }\n  \n//     return (\n//       <div>\n//         <PDFUpload />\n//         <div>\n//           {messages.map((message, index) => (\n//             <div key={index}>\n//               {message.role === 'user' ? (\n//                 <div>\n//                   <div className='prompt-bubble-container'>\n//                     <div className='prompt-bubble'>\n//                       <div className='prompt-bubble-content'>\n//                         {message.content}\n//                       </div>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ) : (\n//                 <div>\n//                   <MessageBubble message={message.content} />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n//         </div>\n//         <div>\n//           <footer></footer>\n//         </div>\n//         <div className='prompt-container'>\n//           <div className='prompt-textarea-container'>\n//             <textarea value={userInput} rows=\"1\" className='prompt-textarea-box' onChange={(e) => setUserInput(e.target.value)} onKeyDown={handleSendMessage} placeholder=\"Thype Prompt Here...\" onInput={handleTextAreaHeight}></textarea>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <Chatbot />\n//     </div>\n//   );\n// }\n\n\n\nexport default Chatbot;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AACnB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,SAAS,MAAM,aAAa;AAEnC,MAAMC,YAAY,GAAG,4CAA4C,CAAC,CAAC;AACnE,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAeC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}